// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_test_2eproto {
	// Internal implementation detail -- do not use these members.
	struct TableStruct {
		static const ::google::protobuf::internal::ParseTableField entries[];
		static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
		static const ::google::protobuf::internal::ParseTable schema[15];
		static const ::google::protobuf::internal::FieldMetadata field_metadata[];
		static const ::google::protobuf::internal::SerializationTable serialization_table[];
		static const ::google::protobuf::uint32 offsets[];
	};
	void AddDescriptors();
	void InitDefaultsTestChannelDataMessageImpl();
	void InitDefaultsTestChannelDataMessage();
	void InitDefaultsTestAnyMessage_Type1Impl();
	void InitDefaultsTestAnyMessage_Type1();
	void InitDefaultsTestAnyMessage_Type2Impl();
	void InitDefaultsTestAnyMessage_Type2();
	void InitDefaultsTestAnyMessageImpl();
	void InitDefaultsTestAnyMessage();
	void InitDefaultsTestMergeMessage_StringWrapperImpl();
	void InitDefaultsTestMergeMessage_StringWrapper();
	void InitDefaultsTestMergeMessage_KvEntry_DoNotUseImpl();
	void InitDefaultsTestMergeMessage_KvEntry_DoNotUse();
	void InitDefaultsTestMergeMessageImpl();
	void InitDefaultsTestMergeMessage();
	void InitDefaultsTestMapMessage_KvEntry_DoNotUseImpl();
	void InitDefaultsTestMapMessage_KvEntry_DoNotUse();
	void InitDefaultsTestMapMessage_StringWrapperImpl();
	void InitDefaultsTestMapMessage_StringWrapper();
	void InitDefaultsTestMapMessage_Kv2Entry_DoNotUseImpl();
	void InitDefaultsTestMapMessage_Kv2Entry_DoNotUse();
	void InitDefaultsTestMapMessageImpl();
	void InitDefaultsTestMapMessage();
	void InitDefaultsTestFieldMaskMessage_NestedMessageImpl();
	void InitDefaultsTestFieldMaskMessage_NestedMessage();
	void InitDefaultsTestFieldMaskMessage_Kv1Entry_DoNotUseImpl();
	void InitDefaultsTestFieldMaskMessage_Kv1Entry_DoNotUse();
	void InitDefaultsTestFieldMaskMessage_Kv2Entry_DoNotUseImpl();
	void InitDefaultsTestFieldMaskMessage_Kv2Entry_DoNotUse();
	void InitDefaultsTestFieldMaskMessageImpl();
	void InitDefaultsTestFieldMaskMessage();
	inline void InitDefaults() {
		InitDefaultsTestChannelDataMessage();
		InitDefaultsTestAnyMessage_Type1();
		InitDefaultsTestAnyMessage_Type2();
		InitDefaultsTestAnyMessage();
		InitDefaultsTestMergeMessage_StringWrapper();
		InitDefaultsTestMergeMessage_KvEntry_DoNotUse();
		InitDefaultsTestMergeMessage();
		InitDefaultsTestMapMessage_KvEntry_DoNotUse();
		InitDefaultsTestMapMessage_StringWrapper();
		InitDefaultsTestMapMessage_Kv2Entry_DoNotUse();
		InitDefaultsTestMapMessage();
		InitDefaultsTestFieldMaskMessage_NestedMessage();
		InitDefaultsTestFieldMaskMessage_Kv1Entry_DoNotUse();
		InitDefaultsTestFieldMaskMessage_Kv2Entry_DoNotUse();
		InitDefaultsTestFieldMaskMessage();
	}
}  // namespace protobuf_test_2eproto
namespace testpb {
	class TestAnyMessage;
	class TestAnyMessageDefaultTypeInternal;
	extern TestAnyMessageDefaultTypeInternal _TestAnyMessage_default_instance_;
	class TestAnyMessage_Type1;
	class TestAnyMessage_Type1DefaultTypeInternal;
	extern TestAnyMessage_Type1DefaultTypeInternal _TestAnyMessage_Type1_default_instance_;
	class TestAnyMessage_Type2;
	class TestAnyMessage_Type2DefaultTypeInternal;
	extern TestAnyMessage_Type2DefaultTypeInternal _TestAnyMessage_Type2_default_instance_;
	class TestChannelDataMessage;
	class TestChannelDataMessageDefaultTypeInternal;
	extern TestChannelDataMessageDefaultTypeInternal _TestChannelDataMessage_default_instance_;
	class TestFieldMaskMessage;
	class TestFieldMaskMessageDefaultTypeInternal;
	extern TestFieldMaskMessageDefaultTypeInternal _TestFieldMaskMessage_default_instance_;
	class TestFieldMaskMessage_Kv1Entry_DoNotUse;
	class TestFieldMaskMessage_Kv1Entry_DoNotUseDefaultTypeInternal;
	extern TestFieldMaskMessage_Kv1Entry_DoNotUseDefaultTypeInternal _TestFieldMaskMessage_Kv1Entry_DoNotUse_default_instance_;
	class TestFieldMaskMessage_Kv2Entry_DoNotUse;
	class TestFieldMaskMessage_Kv2Entry_DoNotUseDefaultTypeInternal;
	extern TestFieldMaskMessage_Kv2Entry_DoNotUseDefaultTypeInternal _TestFieldMaskMessage_Kv2Entry_DoNotUse_default_instance_;
	class TestFieldMaskMessage_NestedMessage;
	class TestFieldMaskMessage_NestedMessageDefaultTypeInternal;
	extern TestFieldMaskMessage_NestedMessageDefaultTypeInternal _TestFieldMaskMessage_NestedMessage_default_instance_;
	class TestMapMessage;
	class TestMapMessageDefaultTypeInternal;
	extern TestMapMessageDefaultTypeInternal _TestMapMessage_default_instance_;
	class TestMapMessage_Kv2Entry_DoNotUse;
	class TestMapMessage_Kv2Entry_DoNotUseDefaultTypeInternal;
	extern TestMapMessage_Kv2Entry_DoNotUseDefaultTypeInternal _TestMapMessage_Kv2Entry_DoNotUse_default_instance_;
	class TestMapMessage_KvEntry_DoNotUse;
	class TestMapMessage_KvEntry_DoNotUseDefaultTypeInternal;
	extern TestMapMessage_KvEntry_DoNotUseDefaultTypeInternal _TestMapMessage_KvEntry_DoNotUse_default_instance_;
	class TestMapMessage_StringWrapper;
	class TestMapMessage_StringWrapperDefaultTypeInternal;
	extern TestMapMessage_StringWrapperDefaultTypeInternal _TestMapMessage_StringWrapper_default_instance_;
	class TestMergeMessage;
	class TestMergeMessageDefaultTypeInternal;
	extern TestMergeMessageDefaultTypeInternal _TestMergeMessage_default_instance_;
	class TestMergeMessage_KvEntry_DoNotUse;
	class TestMergeMessage_KvEntry_DoNotUseDefaultTypeInternal;
	extern TestMergeMessage_KvEntry_DoNotUseDefaultTypeInternal _TestMergeMessage_KvEntry_DoNotUse_default_instance_;
	class TestMergeMessage_StringWrapper;
	class TestMergeMessage_StringWrapperDefaultTypeInternal;
	extern TestMergeMessage_StringWrapperDefaultTypeInternal _TestMergeMessage_StringWrapper_default_instance_;
}  // namespace testpb
namespace testpb {

	// ===================================================================

	class TestChannelDataMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestChannelDataMessage) */ {
	public:
		TestChannelDataMessage();
		virtual ~TestChannelDataMessage();

		TestChannelDataMessage(const TestChannelDataMessage& from);

		inline TestChannelDataMessage& operator=(const TestChannelDataMessage& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestChannelDataMessage(TestChannelDataMessage&& from) noexcept
			: TestChannelDataMessage() {
			*this = ::std::move(from);
		}

		inline TestChannelDataMessage& operator=(TestChannelDataMessage&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestChannelDataMessage& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestChannelDataMessage* internal_default_instance() {
			return reinterpret_cast<const TestChannelDataMessage*>(
				&_TestChannelDataMessage_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			0;

		void Swap(TestChannelDataMessage* other);
		friend void swap(TestChannelDataMessage& a, TestChannelDataMessage& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestChannelDataMessage* New() const PROTOBUF_FINAL { return New(NULL); }

		TestChannelDataMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestChannelDataMessage& from);
		void MergeFrom(const TestChannelDataMessage& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestChannelDataMessage* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------

		// string text = 1;
		void clear_text();
		static const int kTextFieldNumber = 1;
		const ::std::string& text() const;
		void set_text(const ::std::string& value);
#if LANG_CXX11
		void set_text(::std::string&& value);
#endif
		void set_text(const char* value);
		void set_text(const char* value, size_t size);
		::std::string* mutable_text();
		::std::string* release_text();
		void set_allocated_text(::std::string* text);

		// uint32 num = 2;
		void clear_num();
		static const int kNumFieldNumber = 2;
		::google::protobuf::uint32 num() const;
		void set_num(::google::protobuf::uint32 value);

		// @@protoc_insertion_point(class_scope:testpb.TestChannelDataMessage)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::internal::ArenaStringPtr text_;
		::google::protobuf::uint32 num_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestChannelDataMessageImpl();
	};
	// -------------------------------------------------------------------

	class TestAnyMessage_Type1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestAnyMessage.Type1) */ {
	public:
		TestAnyMessage_Type1();
		virtual ~TestAnyMessage_Type1();

		TestAnyMessage_Type1(const TestAnyMessage_Type1& from);

		inline TestAnyMessage_Type1& operator=(const TestAnyMessage_Type1& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestAnyMessage_Type1(TestAnyMessage_Type1&& from) noexcept
			: TestAnyMessage_Type1() {
			*this = ::std::move(from);
		}

		inline TestAnyMessage_Type1& operator=(TestAnyMessage_Type1&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestAnyMessage_Type1& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestAnyMessage_Type1* internal_default_instance() {
			return reinterpret_cast<const TestAnyMessage_Type1*>(
				&_TestAnyMessage_Type1_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			1;

		void Swap(TestAnyMessage_Type1* other);
		friend void swap(TestAnyMessage_Type1& a, TestAnyMessage_Type1& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestAnyMessage_Type1* New() const PROTOBUF_FINAL { return New(NULL); }

		TestAnyMessage_Type1* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestAnyMessage_Type1& from);
		void MergeFrom(const TestAnyMessage_Type1& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestAnyMessage_Type1* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------

		// string value = 1;
		void clear_value();
		static const int kValueFieldNumber = 1;
		const ::std::string& value() const;
		void set_value(const ::std::string& value);
#if LANG_CXX11
		void set_value(::std::string&& value);
#endif
		void set_value(const char* value);
		void set_value(const char* value, size_t size);
		::std::string* mutable_value();
		::std::string* release_value();
		void set_allocated_value(::std::string* value);

		// @@protoc_insertion_point(class_scope:testpb.TestAnyMessage.Type1)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::internal::ArenaStringPtr value_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestAnyMessage_Type1Impl();
	};
	// -------------------------------------------------------------------

	class TestAnyMessage_Type2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestAnyMessage.Type2) */ {
	public:
		TestAnyMessage_Type2();
		virtual ~TestAnyMessage_Type2();

		TestAnyMessage_Type2(const TestAnyMessage_Type2& from);

		inline TestAnyMessage_Type2& operator=(const TestAnyMessage_Type2& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestAnyMessage_Type2(TestAnyMessage_Type2&& from) noexcept
			: TestAnyMessage_Type2() {
			*this = ::std::move(from);
		}

		inline TestAnyMessage_Type2& operator=(TestAnyMessage_Type2&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestAnyMessage_Type2& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestAnyMessage_Type2* internal_default_instance() {
			return reinterpret_cast<const TestAnyMessage_Type2*>(
				&_TestAnyMessage_Type2_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			2;

		void Swap(TestAnyMessage_Type2* other);
		friend void swap(TestAnyMessage_Type2& a, TestAnyMessage_Type2& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestAnyMessage_Type2* New() const PROTOBUF_FINAL { return New(NULL); }

		TestAnyMessage_Type2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestAnyMessage_Type2& from);
		void MergeFrom(const TestAnyMessage_Type2& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestAnyMessage_Type2* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------

		// int64 value = 1;
		void clear_value();
		static const int kValueFieldNumber = 1;
		::google::protobuf::int64 value() const;
		void set_value(::google::protobuf::int64 value);

		// @@protoc_insertion_point(class_scope:testpb.TestAnyMessage.Type2)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::int64 value_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestAnyMessage_Type2Impl();
	};
	// -------------------------------------------------------------------

	class TestAnyMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestAnyMessage) */ {
	public:
		TestAnyMessage();
		virtual ~TestAnyMessage();

		TestAnyMessage(const TestAnyMessage& from);

		inline TestAnyMessage& operator=(const TestAnyMessage& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestAnyMessage(TestAnyMessage&& from) noexcept
			: TestAnyMessage() {
			*this = ::std::move(from);
		}

		inline TestAnyMessage& operator=(TestAnyMessage&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestAnyMessage& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestAnyMessage* internal_default_instance() {
			return reinterpret_cast<const TestAnyMessage*>(
				&_TestAnyMessage_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			3;

		void Swap(TestAnyMessage* other);
		friend void swap(TestAnyMessage& a, TestAnyMessage& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestAnyMessage* New() const PROTOBUF_FINAL { return New(NULL); }

		TestAnyMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestAnyMessage& from);
		void MergeFrom(const TestAnyMessage& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestAnyMessage* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		typedef TestAnyMessage_Type1 Type1;
		typedef TestAnyMessage_Type2 Type2;

		// accessors -------------------------------------------------------

		// repeated .google.protobuf.Any list = 2;
		int list_size() const;
		void clear_list();
		static const int kListFieldNumber = 2;
		const ::google::protobuf::Any& list(int index) const;
		::google::protobuf::Any* mutable_list(int index);
		::google::protobuf::Any* add_list();
		::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
			mutable_list();
		const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
			list() const;

		// .google.protobuf.Any msg = 1;
		bool has_msg() const;
		void clear_msg();
		static const int kMsgFieldNumber = 1;
		const ::google::protobuf::Any& msg() const;
		::google::protobuf::Any* release_msg();
		::google::protobuf::Any* mutable_msg();
		void set_allocated_msg(::google::protobuf::Any* msg);

		// @@protoc_insertion_point(class_scope:testpb.TestAnyMessage)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > list_;
		::google::protobuf::Any* msg_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestAnyMessageImpl();
	};
	// -------------------------------------------------------------------

	class TestMergeMessage_StringWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestMergeMessage.StringWrapper) */ {
	public:
		TestMergeMessage_StringWrapper();
		virtual ~TestMergeMessage_StringWrapper();

		TestMergeMessage_StringWrapper(const TestMergeMessage_StringWrapper& from);

		inline TestMergeMessage_StringWrapper& operator=(const TestMergeMessage_StringWrapper& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestMergeMessage_StringWrapper(TestMergeMessage_StringWrapper&& from) noexcept
			: TestMergeMessage_StringWrapper() {
			*this = ::std::move(from);
		}

		inline TestMergeMessage_StringWrapper& operator=(TestMergeMessage_StringWrapper&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestMergeMessage_StringWrapper& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestMergeMessage_StringWrapper* internal_default_instance() {
			return reinterpret_cast<const TestMergeMessage_StringWrapper*>(
				&_TestMergeMessage_StringWrapper_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			4;

		void Swap(TestMergeMessage_StringWrapper* other);
		friend void swap(TestMergeMessage_StringWrapper& a, TestMergeMessage_StringWrapper& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestMergeMessage_StringWrapper* New() const PROTOBUF_FINAL { return New(NULL); }

		TestMergeMessage_StringWrapper* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestMergeMessage_StringWrapper& from);
		void MergeFrom(const TestMergeMessage_StringWrapper& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestMergeMessage_StringWrapper* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------

		// string content = 2;
		void clear_content();
		static const int kContentFieldNumber = 2;
		const ::std::string& content() const;
		void set_content(const ::std::string& value);
#if LANG_CXX11
		void set_content(::std::string&& value);
#endif
		void set_content(const char* value);
		void set_content(const char* value, size_t size);
		::std::string* mutable_content();
		::std::string* release_content();
		void set_allocated_content(::std::string* content);

		// bool removed = 1;
		void clear_removed();
		static const int kRemovedFieldNumber = 1;
		bool removed() const;
		void set_removed(bool value);

		// @@protoc_insertion_point(class_scope:testpb.TestMergeMessage.StringWrapper)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::internal::ArenaStringPtr content_;
		bool removed_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestMergeMessage_StringWrapperImpl();
	};
	// -------------------------------------------------------------------

	class TestMergeMessage_KvEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TestMergeMessage_KvEntry_DoNotUse,
		::google::protobuf::int64, ::testpb::TestMergeMessage_StringWrapper,
		::google::protobuf::internal::WireFormatLite::TYPE_INT64,
		::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
		0 > {
	public:
		typedef ::google::protobuf::internal::MapEntry<TestMergeMessage_KvEntry_DoNotUse,
			::google::protobuf::int64, ::testpb::TestMergeMessage_StringWrapper,
			::google::protobuf::internal::WireFormatLite::TYPE_INT64,
			::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
			0 > SuperType;
		TestMergeMessage_KvEntry_DoNotUse();
		TestMergeMessage_KvEntry_DoNotUse(::google::protobuf::Arena* arena);
		void MergeFrom(const TestMergeMessage_KvEntry_DoNotUse& other);
		static const TestMergeMessage_KvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMergeMessage_KvEntry_DoNotUse*>(&_TestMergeMessage_KvEntry_DoNotUse_default_instance_); }
		void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
		::google::protobuf::Metadata GetMetadata() const;
	};

	// -------------------------------------------------------------------

	class TestMergeMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestMergeMessage) */ {
	public:
		TestMergeMessage();
		virtual ~TestMergeMessage();

		TestMergeMessage(const TestMergeMessage& from);

		inline TestMergeMessage& operator=(const TestMergeMessage& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestMergeMessage(TestMergeMessage&& from) noexcept
			: TestMergeMessage() {
			*this = ::std::move(from);
		}

		inline TestMergeMessage& operator=(TestMergeMessage&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestMergeMessage& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestMergeMessage* internal_default_instance() {
			return reinterpret_cast<const TestMergeMessage*>(
				&_TestMergeMessage_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			6;

		void Swap(TestMergeMessage* other);
		friend void swap(TestMergeMessage& a, TestMergeMessage& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestMergeMessage* New() const PROTOBUF_FINAL { return New(NULL); }

		TestMergeMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestMergeMessage& from);
		void MergeFrom(const TestMergeMessage& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestMergeMessage* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		typedef TestMergeMessage_StringWrapper StringWrapper;

		// accessors -------------------------------------------------------

		// repeated string list = 1;
		int list_size() const;
		void clear_list();
		static const int kListFieldNumber = 1;
		const ::std::string& list(int index) const;
		::std::string* mutable_list(int index);
		void set_list(int index, const ::std::string& value);
#if LANG_CXX11
		void set_list(int index, ::std::string&& value);
#endif
		void set_list(int index, const char* value);
		void set_list(int index, const char* value, size_t size);
		::std::string* add_list();
		void add_list(const ::std::string& value);
#if LANG_CXX11
		void add_list(::std::string&& value);
#endif
		void add_list(const char* value);
		void add_list(const char* value, size_t size);
		const ::google::protobuf::RepeatedPtrField< ::std::string>& list() const;
		::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list();

		// map<int64, .testpb.TestMergeMessage.StringWrapper> kv = 2;
		int kv_size() const;
		void clear_kv();
		static const int kKvFieldNumber = 2;
		const ::google::protobuf::Map< ::google::protobuf::int64, ::testpb::TestMergeMessage_StringWrapper >&
			kv() const;
		::google::protobuf::Map< ::google::protobuf::int64, ::testpb::TestMergeMessage_StringWrapper >*
			mutable_kv();

		// @@protoc_insertion_point(class_scope:testpb.TestMergeMessage)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::RepeatedPtrField< ::std::string> list_;
		::google::protobuf::internal::MapField<
			TestMergeMessage_KvEntry_DoNotUse,
			::google::protobuf::int64, ::testpb::TestMergeMessage_StringWrapper,
			::google::protobuf::internal::WireFormatLite::TYPE_INT64,
			::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
			0 > kv_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestMergeMessageImpl();
	};
	// -------------------------------------------------------------------

	class TestMapMessage_KvEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TestMapMessage_KvEntry_DoNotUse,
		::google::protobuf::uint32, ::std::string,
		::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
		::google::protobuf::internal::WireFormatLite::TYPE_STRING,
		0 > {
	public:
		typedef ::google::protobuf::internal::MapEntry<TestMapMessage_KvEntry_DoNotUse,
			::google::protobuf::uint32, ::std::string,
			::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
			::google::protobuf::internal::WireFormatLite::TYPE_STRING,
			0 > SuperType;
		TestMapMessage_KvEntry_DoNotUse();
		TestMapMessage_KvEntry_DoNotUse(::google::protobuf::Arena* arena);
		void MergeFrom(const TestMapMessage_KvEntry_DoNotUse& other);
		static const TestMapMessage_KvEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMapMessage_KvEntry_DoNotUse*>(&_TestMapMessage_KvEntry_DoNotUse_default_instance_); }
		void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
		::google::protobuf::Metadata GetMetadata() const;
	};

	// -------------------------------------------------------------------

	class TestMapMessage_StringWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestMapMessage.StringWrapper) */ {
	public:
		TestMapMessage_StringWrapper();
		virtual ~TestMapMessage_StringWrapper();

		TestMapMessage_StringWrapper(const TestMapMessage_StringWrapper& from);

		inline TestMapMessage_StringWrapper& operator=(const TestMapMessage_StringWrapper& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestMapMessage_StringWrapper(TestMapMessage_StringWrapper&& from) noexcept
			: TestMapMessage_StringWrapper() {
			*this = ::std::move(from);
		}

		inline TestMapMessage_StringWrapper& operator=(TestMapMessage_StringWrapper&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestMapMessage_StringWrapper& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestMapMessage_StringWrapper* internal_default_instance() {
			return reinterpret_cast<const TestMapMessage_StringWrapper*>(
				&_TestMapMessage_StringWrapper_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			8;

		void Swap(TestMapMessage_StringWrapper* other);
		friend void swap(TestMapMessage_StringWrapper& a, TestMapMessage_StringWrapper& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestMapMessage_StringWrapper* New() const PROTOBUF_FINAL { return New(NULL); }

		TestMapMessage_StringWrapper* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestMapMessage_StringWrapper& from);
		void MergeFrom(const TestMapMessage_StringWrapper& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestMapMessage_StringWrapper* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------

		// string content = 1;
		void clear_content();
		static const int kContentFieldNumber = 1;
		const ::std::string& content() const;
		void set_content(const ::std::string& value);
#if LANG_CXX11
		void set_content(::std::string&& value);
#endif
		void set_content(const char* value);
		void set_content(const char* value, size_t size);
		::std::string* mutable_content();
		::std::string* release_content();
		void set_allocated_content(::std::string* content);

		// int64 num = 2;
		void clear_num();
		static const int kNumFieldNumber = 2;
		::google::protobuf::int64 num() const;
		void set_num(::google::protobuf::int64 value);

		// @@protoc_insertion_point(class_scope:testpb.TestMapMessage.StringWrapper)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::internal::ArenaStringPtr content_;
		::google::protobuf::int64 num_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestMapMessage_StringWrapperImpl();
	};
	// -------------------------------------------------------------------

	class TestMapMessage_Kv2Entry_DoNotUse : public ::google::protobuf::internal::MapEntry<TestMapMessage_Kv2Entry_DoNotUse,
		::google::protobuf::uint32, ::testpb::TestMapMessage_StringWrapper,
		::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
		::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
		0 > {
	public:
		typedef ::google::protobuf::internal::MapEntry<TestMapMessage_Kv2Entry_DoNotUse,
			::google::protobuf::uint32, ::testpb::TestMapMessage_StringWrapper,
			::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
			::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
			0 > SuperType;
		TestMapMessage_Kv2Entry_DoNotUse();
		TestMapMessage_Kv2Entry_DoNotUse(::google::protobuf::Arena* arena);
		void MergeFrom(const TestMapMessage_Kv2Entry_DoNotUse& other);
		static const TestMapMessage_Kv2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestMapMessage_Kv2Entry_DoNotUse*>(&_TestMapMessage_Kv2Entry_DoNotUse_default_instance_); }
		void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
		::google::protobuf::Metadata GetMetadata() const;
	};

	// -------------------------------------------------------------------

	class TestMapMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestMapMessage) */ {
	public:
		TestMapMessage();
		virtual ~TestMapMessage();

		TestMapMessage(const TestMapMessage& from);

		inline TestMapMessage& operator=(const TestMapMessage& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestMapMessage(TestMapMessage&& from) noexcept
			: TestMapMessage() {
			*this = ::std::move(from);
		}

		inline TestMapMessage& operator=(TestMapMessage&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestMapMessage& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestMapMessage* internal_default_instance() {
			return reinterpret_cast<const TestMapMessage*>(
				&_TestMapMessage_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			10;

		void Swap(TestMapMessage* other);
		friend void swap(TestMapMessage& a, TestMapMessage& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestMapMessage* New() const PROTOBUF_FINAL { return New(NULL); }

		TestMapMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestMapMessage& from);
		void MergeFrom(const TestMapMessage& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestMapMessage* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		typedef TestMapMessage_StringWrapper StringWrapper;

		// accessors -------------------------------------------------------

		// map<uint32, string> kv = 1;
		int kv_size() const;
		void clear_kv();
		static const int kKvFieldNumber = 1;
		const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
			kv() const;
		::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
			mutable_kv();

		// map<uint32, .testpb.TestMapMessage.StringWrapper> kv2 = 2;
		int kv2_size() const;
		void clear_kv2();
		static const int kKv2FieldNumber = 2;
		const ::google::protobuf::Map< ::google::protobuf::uint32, ::testpb::TestMapMessage_StringWrapper >&
			kv2() const;
		::google::protobuf::Map< ::google::protobuf::uint32, ::testpb::TestMapMessage_StringWrapper >*
			mutable_kv2();

		// @@protoc_insertion_point(class_scope:testpb.TestMapMessage)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::internal::MapField<
			TestMapMessage_KvEntry_DoNotUse,
			::google::protobuf::uint32, ::std::string,
			::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
			::google::protobuf::internal::WireFormatLite::TYPE_STRING,
			0 > kv_;
		::google::protobuf::internal::MapField<
			TestMapMessage_Kv2Entry_DoNotUse,
			::google::protobuf::uint32, ::testpb::TestMapMessage_StringWrapper,
			::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
			::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
			0 > kv2_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestMapMessageImpl();
	};
	// -------------------------------------------------------------------

	class TestFieldMaskMessage_NestedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestFieldMaskMessage.NestedMessage) */ {
	public:
		TestFieldMaskMessage_NestedMessage();
		virtual ~TestFieldMaskMessage_NestedMessage();

		TestFieldMaskMessage_NestedMessage(const TestFieldMaskMessage_NestedMessage& from);

		inline TestFieldMaskMessage_NestedMessage& operator=(const TestFieldMaskMessage_NestedMessage& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestFieldMaskMessage_NestedMessage(TestFieldMaskMessage_NestedMessage&& from) noexcept
			: TestFieldMaskMessage_NestedMessage() {
			*this = ::std::move(from);
		}

		inline TestFieldMaskMessage_NestedMessage& operator=(TestFieldMaskMessage_NestedMessage&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestFieldMaskMessage_NestedMessage& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestFieldMaskMessage_NestedMessage* internal_default_instance() {
			return reinterpret_cast<const TestFieldMaskMessage_NestedMessage*>(
				&_TestFieldMaskMessage_NestedMessage_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			11;

		void Swap(TestFieldMaskMessage_NestedMessage* other);
		friend void swap(TestFieldMaskMessage_NestedMessage& a, TestFieldMaskMessage_NestedMessage& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestFieldMaskMessage_NestedMessage* New() const PROTOBUF_FINAL { return New(NULL); }

		TestFieldMaskMessage_NestedMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestFieldMaskMessage_NestedMessage& from);
		void MergeFrom(const TestFieldMaskMessage_NestedMessage& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestFieldMaskMessage_NestedMessage* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------

		// int64 p1 = 1;
		void clear_p1();
		static const int kP1FieldNumber = 1;
		::google::protobuf::int64 p1() const;
		void set_p1(::google::protobuf::int64 value);

		// uint32 p2 = 2;
		void clear_p2();
		static const int kP2FieldNumber = 2;
		::google::protobuf::uint32 p2() const;
		void set_p2(::google::protobuf::uint32 value);

		// @@protoc_insertion_point(class_scope:testpb.TestFieldMaskMessage.NestedMessage)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::int64 p1_;
		::google::protobuf::uint32 p2_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestFieldMaskMessage_NestedMessageImpl();
	};
	// -------------------------------------------------------------------

	class TestFieldMaskMessage_Kv1Entry_DoNotUse : public ::google::protobuf::internal::MapEntry<TestFieldMaskMessage_Kv1Entry_DoNotUse,
		::google::protobuf::int64, ::testpb::TestFieldMaskMessage_NestedMessage,
		::google::protobuf::internal::WireFormatLite::TYPE_INT64,
		::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
		0 > {
	public:
		typedef ::google::protobuf::internal::MapEntry<TestFieldMaskMessage_Kv1Entry_DoNotUse,
			::google::protobuf::int64, ::testpb::TestFieldMaskMessage_NestedMessage,
			::google::protobuf::internal::WireFormatLite::TYPE_INT64,
			::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
			0 > SuperType;
		TestFieldMaskMessage_Kv1Entry_DoNotUse();
		TestFieldMaskMessage_Kv1Entry_DoNotUse(::google::protobuf::Arena* arena);
		void MergeFrom(const TestFieldMaskMessage_Kv1Entry_DoNotUse& other);
		static const TestFieldMaskMessage_Kv1Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestFieldMaskMessage_Kv1Entry_DoNotUse*>(&_TestFieldMaskMessage_Kv1Entry_DoNotUse_default_instance_); }
		void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
		::google::protobuf::Metadata GetMetadata() const;
	};

	// -------------------------------------------------------------------

	class TestFieldMaskMessage_Kv2Entry_DoNotUse : public ::google::protobuf::internal::MapEntry<TestFieldMaskMessage_Kv2Entry_DoNotUse,
		::google::protobuf::int64, ::std::string,
		::google::protobuf::internal::WireFormatLite::TYPE_INT64,
		::google::protobuf::internal::WireFormatLite::TYPE_STRING,
		0 > {
	public:
		typedef ::google::protobuf::internal::MapEntry<TestFieldMaskMessage_Kv2Entry_DoNotUse,
			::google::protobuf::int64, ::std::string,
			::google::protobuf::internal::WireFormatLite::TYPE_INT64,
			::google::protobuf::internal::WireFormatLite::TYPE_STRING,
			0 > SuperType;
		TestFieldMaskMessage_Kv2Entry_DoNotUse();
		TestFieldMaskMessage_Kv2Entry_DoNotUse(::google::protobuf::Arena* arena);
		void MergeFrom(const TestFieldMaskMessage_Kv2Entry_DoNotUse& other);
		static const TestFieldMaskMessage_Kv2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestFieldMaskMessage_Kv2Entry_DoNotUse*>(&_TestFieldMaskMessage_Kv2Entry_DoNotUse_default_instance_); }
		void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
		::google::protobuf::Metadata GetMetadata() const;
	};

	// -------------------------------------------------------------------

	class TestFieldMaskMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:testpb.TestFieldMaskMessage) */ {
	public:
		TestFieldMaskMessage();
		virtual ~TestFieldMaskMessage();

		TestFieldMaskMessage(const TestFieldMaskMessage& from);

		inline TestFieldMaskMessage& operator=(const TestFieldMaskMessage& from) {
			CopyFrom(from);
			return *this;
		}
#if LANG_CXX11
		TestFieldMaskMessage(TestFieldMaskMessage&& from) noexcept
			: TestFieldMaskMessage() {
			*this = ::std::move(from);
		}

		inline TestFieldMaskMessage& operator=(TestFieldMaskMessage&& from) noexcept {
			if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
				if (this != &from) InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}
#endif
		static const ::google::protobuf::Descriptor* descriptor();
		static const TestFieldMaskMessage& default_instance();

		static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
		static inline const TestFieldMaskMessage* internal_default_instance() {
			return reinterpret_cast<const TestFieldMaskMessage*>(
				&_TestFieldMaskMessage_default_instance_);
		}
		static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
			14;

		void Swap(TestFieldMaskMessage* other);
		friend void swap(TestFieldMaskMessage& a, TestFieldMaskMessage& b) {
			a.Swap(&b);
		}

		// implements Message ----------------------------------------------

		inline TestFieldMaskMessage* New() const PROTOBUF_FINAL { return New(NULL); }

		TestFieldMaskMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
		void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
		void CopyFrom(const TestFieldMaskMessage& from);
		void MergeFrom(const TestFieldMaskMessage& from);
		void Clear() PROTOBUF_FINAL;
		bool IsInitialized() const PROTOBUF_FINAL;

		size_t ByteSizeLong() const PROTOBUF_FINAL;
		bool MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
		void SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
		::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
			bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
		int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
	private:
		void SharedCtor();
		void SharedDtor();
		void SetCachedSize(int size) const PROTOBUF_FINAL;
		void InternalSwap(TestFieldMaskMessage* other);
	private:
		inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
			return NULL;
		}
		inline void* MaybeArenaPtr() const {
			return NULL;
		}
	public:

		::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

		// nested types ----------------------------------------------------

		typedef TestFieldMaskMessage_NestedMessage NestedMessage;

		// accessors -------------------------------------------------------

		// repeated .testpb.TestFieldMaskMessage.NestedMessage list = 3;
		int list_size() const;
		void clear_list();
		static const int kListFieldNumber = 3;
		const ::testpb::TestFieldMaskMessage_NestedMessage& list(int index) const;
		::testpb::TestFieldMaskMessage_NestedMessage* mutable_list(int index);
		::testpb::TestFieldMaskMessage_NestedMessage* add_list();
		::google::protobuf::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage >*
			mutable_list();
		const ::google::protobuf::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage >&
			list() const;

		// map<int64, .testpb.TestFieldMaskMessage.NestedMessage> kv1 = 4;
		int kv1_size() const;
		void clear_kv1();
		static const int kKv1FieldNumber = 4;
		const ::google::protobuf::Map< ::google::protobuf::int64, ::testpb::TestFieldMaskMessage_NestedMessage >&
			kv1() const;
		::google::protobuf::Map< ::google::protobuf::int64, ::testpb::TestFieldMaskMessage_NestedMessage >*
			mutable_kv1();

		// map<int64, string> kv2 = 5;
		int kv2_size() const;
		void clear_kv2();
		static const int kKv2FieldNumber = 5;
		const ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >&
			kv2() const;
		::google::protobuf::Map< ::google::protobuf::int64, ::std::string >*
			mutable_kv2();

		// string name = 1;
		void clear_name();
		static const int kNameFieldNumber = 1;
		const ::std::string& name() const;
		void set_name(const ::std::string& value);
#if LANG_CXX11
		void set_name(::std::string&& value);
#endif
		void set_name(const char* value);
		void set_name(const char* value, size_t size);
		::std::string* mutable_name();
		::std::string* release_name();
		void set_allocated_name(::std::string* name);

		// .testpb.TestFieldMaskMessage.NestedMessage msg = 2;
		bool has_msg() const;
		void clear_msg();
		static const int kMsgFieldNumber = 2;
		const ::testpb::TestFieldMaskMessage_NestedMessage& msg() const;
		::testpb::TestFieldMaskMessage_NestedMessage* release_msg();
		::testpb::TestFieldMaskMessage_NestedMessage* mutable_msg();
		void set_allocated_msg(::testpb::TestFieldMaskMessage_NestedMessage* msg);

		// @@protoc_insertion_point(class_scope:testpb.TestFieldMaskMessage)
	private:

		::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
		::google::protobuf::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage > list_;
		::google::protobuf::internal::MapField<
			TestFieldMaskMessage_Kv1Entry_DoNotUse,
			::google::protobuf::int64, ::testpb::TestFieldMaskMessage_NestedMessage,
			::google::protobuf::internal::WireFormatLite::TYPE_INT64,
			::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
			0 > kv1_;
		::google::protobuf::internal::MapField<
			TestFieldMaskMessage_Kv2Entry_DoNotUse,
			::google::protobuf::int64, ::std::string,
			::google::protobuf::internal::WireFormatLite::TYPE_INT64,
			::google::protobuf::internal::WireFormatLite::TYPE_STRING,
			0 > kv2_;
		::google::protobuf::internal::ArenaStringPtr name_;
		::testpb::TestFieldMaskMessage_NestedMessage* msg_;
		mutable int _cached_size_;
		friend struct ::protobuf_test_2eproto::TableStruct;
		friend void ::protobuf_test_2eproto::InitDefaultsTestFieldMaskMessageImpl();
	};
	// ===================================================================


	// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestChannelDataMessage

// string text = 1;
	inline void TestChannelDataMessage::clear_text() {
		text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline const ::std::string& TestChannelDataMessage::text() const {
		// @@protoc_insertion_point(field_get:testpb.TestChannelDataMessage.text)
		return text_.GetNoArena();
	}
	inline void TestChannelDataMessage::set_text(const ::std::string& value) {

		text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
		// @@protoc_insertion_point(field_set:testpb.TestChannelDataMessage.text)
	}
#if LANG_CXX11
	inline void TestChannelDataMessage::set_text(::std::string&& value) {

		text_.SetNoArena(
			&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
		// @@protoc_insertion_point(field_set_rvalue:testpb.TestChannelDataMessage.text)
	}
#endif
	inline void TestChannelDataMessage::set_text(const char* value) {
		GOOGLE_DCHECK(value != NULL);

		text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
		// @@protoc_insertion_point(field_set_char:testpb.TestChannelDataMessage.text)
	}
	inline void TestChannelDataMessage::set_text(const char* value, size_t size) {

		text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
			::std::string(reinterpret_cast<const char*>(value), size));
		// @@protoc_insertion_point(field_set_pointer:testpb.TestChannelDataMessage.text)
	}
	inline ::std::string* TestChannelDataMessage::mutable_text() {

		// @@protoc_insertion_point(field_mutable:testpb.TestChannelDataMessage.text)
		return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline ::std::string* TestChannelDataMessage::release_text() {
		// @@protoc_insertion_point(field_release:testpb.TestChannelDataMessage.text)

		return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline void TestChannelDataMessage::set_allocated_text(::std::string* text) {
		if (text != NULL) {

		}
		else {

		}
		text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
		// @@protoc_insertion_point(field_set_allocated:testpb.TestChannelDataMessage.text)
	}

	// uint32 num = 2;
	inline void TestChannelDataMessage::clear_num() {
		num_ = 0u;
	}
	inline ::google::protobuf::uint32 TestChannelDataMessage::num() const {
		// @@protoc_insertion_point(field_get:testpb.TestChannelDataMessage.num)
		return num_;
	}
	inline void TestChannelDataMessage::set_num(::google::protobuf::uint32 value) {

		num_ = value;
		// @@protoc_insertion_point(field_set:testpb.TestChannelDataMessage.num)
	}

	// -------------------------------------------------------------------

	// TestAnyMessage_Type1

	// string value = 1;
	inline void TestAnyMessage_Type1::clear_value() {
		value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline const ::std::string& TestAnyMessage_Type1::value() const {
		// @@protoc_insertion_point(field_get:testpb.TestAnyMessage.Type1.value)
		return value_.GetNoArena();
	}
	inline void TestAnyMessage_Type1::set_value(const ::std::string& value) {

		value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
		// @@protoc_insertion_point(field_set:testpb.TestAnyMessage.Type1.value)
	}
#if LANG_CXX11
	inline void TestAnyMessage_Type1::set_value(::std::string&& value) {

		value_.SetNoArena(
			&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
		// @@protoc_insertion_point(field_set_rvalue:testpb.TestAnyMessage.Type1.value)
	}
#endif
	inline void TestAnyMessage_Type1::set_value(const char* value) {
		GOOGLE_DCHECK(value != NULL);

		value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
		// @@protoc_insertion_point(field_set_char:testpb.TestAnyMessage.Type1.value)
	}
	inline void TestAnyMessage_Type1::set_value(const char* value, size_t size) {

		value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
			::std::string(reinterpret_cast<const char*>(value), size));
		// @@protoc_insertion_point(field_set_pointer:testpb.TestAnyMessage.Type1.value)
	}
	inline ::std::string* TestAnyMessage_Type1::mutable_value() {

		// @@protoc_insertion_point(field_mutable:testpb.TestAnyMessage.Type1.value)
		return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline ::std::string* TestAnyMessage_Type1::release_value() {
		// @@protoc_insertion_point(field_release:testpb.TestAnyMessage.Type1.value)

		return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline void TestAnyMessage_Type1::set_allocated_value(::std::string* value) {
		if (value != NULL) {

		}
		else {

		}
		value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
		// @@protoc_insertion_point(field_set_allocated:testpb.TestAnyMessage.Type1.value)
	}

	// -------------------------------------------------------------------

	// TestAnyMessage_Type2

	// int64 value = 1;
	inline void TestAnyMessage_Type2::clear_value() {
		value_ = GOOGLE_LONGLONG(0);
	}
	inline ::google::protobuf::int64 TestAnyMessage_Type2::value() const {
		// @@protoc_insertion_point(field_get:testpb.TestAnyMessage.Type2.value)
		return value_;
	}
	inline void TestAnyMessage_Type2::set_value(::google::protobuf::int64 value) {

		value_ = value;
		// @@protoc_insertion_point(field_set:testpb.TestAnyMessage.Type2.value)
	}

	// -------------------------------------------------------------------

	// TestAnyMessage

	// .google.protobuf.Any msg = 1;
	inline bool TestAnyMessage::has_msg() const {
		return this != internal_default_instance() && msg_ != NULL;
	}
	inline const ::google::protobuf::Any& TestAnyMessage::msg() const {
		const ::google::protobuf::Any* p = msg_;
		// @@protoc_insertion_point(field_get:testpb.TestAnyMessage.msg)
		return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
			&::google::protobuf::_Any_default_instance_);
	}
	inline ::google::protobuf::Any* TestAnyMessage::release_msg() {
		// @@protoc_insertion_point(field_release:testpb.TestAnyMessage.msg)

		::google::protobuf::Any* temp = msg_;
		msg_ = NULL;
		return temp;
	}
	inline ::google::protobuf::Any* TestAnyMessage::mutable_msg() {

		if (msg_ == NULL) {
			msg_ = new ::google::protobuf::Any;
		}
		// @@protoc_insertion_point(field_mutable:testpb.TestAnyMessage.msg)
		return msg_;
	}
	inline void TestAnyMessage::set_allocated_msg(::google::protobuf::Any* msg) {
		::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
		if (message_arena == NULL) {
			delete reinterpret_cast<::google::protobuf::MessageLite*>(msg_);
		}
		if (msg) {
			::google::protobuf::Arena* submessage_arena = NULL;
			if (message_arena != submessage_arena) {
				msg = ::google::protobuf::internal::GetOwnedMessage(
					message_arena, msg, submessage_arena);
			}

		}
		else {

		}
		msg_ = msg;
		// @@protoc_insertion_point(field_set_allocated:testpb.TestAnyMessage.msg)
	}

	// repeated .google.protobuf.Any list = 2;
	inline int TestAnyMessage::list_size() const {
		return list_.size();
	}
	inline const ::google::protobuf::Any& TestAnyMessage::list(int index) const {
		// @@protoc_insertion_point(field_get:testpb.TestAnyMessage.list)
		return list_.Get(index);
	}
	inline ::google::protobuf::Any* TestAnyMessage::mutable_list(int index) {
		// @@protoc_insertion_point(field_mutable:testpb.TestAnyMessage.list)
		return list_.Mutable(index);
	}
	inline ::google::protobuf::Any* TestAnyMessage::add_list() {
		// @@protoc_insertion_point(field_add:testpb.TestAnyMessage.list)
		return list_.Add();
	}
	inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
		TestAnyMessage::mutable_list() {
		// @@protoc_insertion_point(field_mutable_list:testpb.TestAnyMessage.list)
		return &list_;
	}
	inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
		TestAnyMessage::list() const {
		// @@protoc_insertion_point(field_list:testpb.TestAnyMessage.list)
		return list_;
	}

	// -------------------------------------------------------------------

	// TestMergeMessage_StringWrapper

	// bool removed = 1;
	inline void TestMergeMessage_StringWrapper::clear_removed() {
		removed_ = false;
	}
	inline bool TestMergeMessage_StringWrapper::removed() const {
		// @@protoc_insertion_point(field_get:testpb.TestMergeMessage.StringWrapper.removed)
		return removed_;
	}
	inline void TestMergeMessage_StringWrapper::set_removed(bool value) {

		removed_ = value;
		// @@protoc_insertion_point(field_set:testpb.TestMergeMessage.StringWrapper.removed)
	}

	// string content = 2;
	inline void TestMergeMessage_StringWrapper::clear_content() {
		content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline const ::std::string& TestMergeMessage_StringWrapper::content() const {
		// @@protoc_insertion_point(field_get:testpb.TestMergeMessage.StringWrapper.content)
		return content_.GetNoArena();
	}
	inline void TestMergeMessage_StringWrapper::set_content(const ::std::string& value) {

		content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
		// @@protoc_insertion_point(field_set:testpb.TestMergeMessage.StringWrapper.content)
	}
#if LANG_CXX11
	inline void TestMergeMessage_StringWrapper::set_content(::std::string&& value) {

		content_.SetNoArena(
			&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
		// @@protoc_insertion_point(field_set_rvalue:testpb.TestMergeMessage.StringWrapper.content)
	}
#endif
	inline void TestMergeMessage_StringWrapper::set_content(const char* value) {
		GOOGLE_DCHECK(value != NULL);

		content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
		// @@protoc_insertion_point(field_set_char:testpb.TestMergeMessage.StringWrapper.content)
	}
	inline void TestMergeMessage_StringWrapper::set_content(const char* value, size_t size) {

		content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
			::std::string(reinterpret_cast<const char*>(value), size));
		// @@protoc_insertion_point(field_set_pointer:testpb.TestMergeMessage.StringWrapper.content)
	}
	inline ::std::string* TestMergeMessage_StringWrapper::mutable_content() {

		// @@protoc_insertion_point(field_mutable:testpb.TestMergeMessage.StringWrapper.content)
		return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline ::std::string* TestMergeMessage_StringWrapper::release_content() {
		// @@protoc_insertion_point(field_release:testpb.TestMergeMessage.StringWrapper.content)

		return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline void TestMergeMessage_StringWrapper::set_allocated_content(::std::string* content) {
		if (content != NULL) {

		}
		else {

		}
		content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
		// @@protoc_insertion_point(field_set_allocated:testpb.TestMergeMessage.StringWrapper.content)
	}

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// TestMergeMessage

	// repeated string list = 1;
	inline int TestMergeMessage::list_size() const {
		return list_.size();
	}
	inline void TestMergeMessage::clear_list() {
		list_.Clear();
	}
	inline const ::std::string& TestMergeMessage::list(int index) const {
		// @@protoc_insertion_point(field_get:testpb.TestMergeMessage.list)
		return list_.Get(index);
	}
	inline ::std::string* TestMergeMessage::mutable_list(int index) {
		// @@protoc_insertion_point(field_mutable:testpb.TestMergeMessage.list)
		return list_.Mutable(index);
	}
	inline void TestMergeMessage::set_list(int index, const ::std::string& value) {
		// @@protoc_insertion_point(field_set:testpb.TestMergeMessage.list)
		list_.Mutable(index)->assign(value);
	}
#if LANG_CXX11
	inline void TestMergeMessage::set_list(int index, ::std::string&& value) {
		// @@protoc_insertion_point(field_set:testpb.TestMergeMessage.list)
		list_.Mutable(index)->assign(std::move(value));
	}
#endif
	inline void TestMergeMessage::set_list(int index, const char* value) {
		GOOGLE_DCHECK(value != NULL);
		list_.Mutable(index)->assign(value);
		// @@protoc_insertion_point(field_set_char:testpb.TestMergeMessage.list)
	}
	inline void TestMergeMessage::set_list(int index, const char* value, size_t size) {
		list_.Mutable(index)->assign(
			reinterpret_cast<const char*>(value), size);
		// @@protoc_insertion_point(field_set_pointer:testpb.TestMergeMessage.list)
	}
	inline ::std::string* TestMergeMessage::add_list() {
		// @@protoc_insertion_point(field_add_mutable:testpb.TestMergeMessage.list)
		return list_.Add();
	}
	inline void TestMergeMessage::add_list(const ::std::string& value) {
		list_.Add()->assign(value);
		// @@protoc_insertion_point(field_add:testpb.TestMergeMessage.list)
	}
#if LANG_CXX11
	inline void TestMergeMessage::add_list(::std::string&& value) {
		list_.Add(std::move(value));
		// @@protoc_insertion_point(field_add:testpb.TestMergeMessage.list)
	}
#endif
	inline void TestMergeMessage::add_list(const char* value) {
		GOOGLE_DCHECK(value != NULL);
		list_.Add()->assign(value);
		// @@protoc_insertion_point(field_add_char:testpb.TestMergeMessage.list)
	}
	inline void TestMergeMessage::add_list(const char* value, size_t size) {
		list_.Add()->assign(reinterpret_cast<const char*>(value), size);
		// @@protoc_insertion_point(field_add_pointer:testpb.TestMergeMessage.list)
	}
	inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
		TestMergeMessage::list() const {
		// @@protoc_insertion_point(field_list:testpb.TestMergeMessage.list)
		return list_;
	}
	inline ::google::protobuf::RepeatedPtrField< ::std::string>*
		TestMergeMessage::mutable_list() {
		// @@protoc_insertion_point(field_mutable_list:testpb.TestMergeMessage.list)
		return &list_;
	}

	// map<int64, .testpb.TestMergeMessage.StringWrapper> kv = 2;
	inline int TestMergeMessage::kv_size() const {
		return kv_.size();
	}
	inline void TestMergeMessage::clear_kv() {
		kv_.Clear();
	}
	inline const ::google::protobuf::Map< ::google::protobuf::int64, ::testpb::TestMergeMessage_StringWrapper >&
		TestMergeMessage::kv() const {
		// @@protoc_insertion_point(field_map:testpb.TestMergeMessage.kv)
		return kv_.GetMap();
	}
	inline ::google::protobuf::Map< ::google::protobuf::int64, ::testpb::TestMergeMessage_StringWrapper >*
		TestMergeMessage::mutable_kv() {
		// @@protoc_insertion_point(field_mutable_map:testpb.TestMergeMessage.kv)
		return kv_.MutableMap();
	}

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// TestMapMessage_StringWrapper

	// string content = 1;
	inline void TestMapMessage_StringWrapper::clear_content() {
		content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline const ::std::string& TestMapMessage_StringWrapper::content() const {
		// @@protoc_insertion_point(field_get:testpb.TestMapMessage.StringWrapper.content)
		return content_.GetNoArena();
	}
	inline void TestMapMessage_StringWrapper::set_content(const ::std::string& value) {

		content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
		// @@protoc_insertion_point(field_set:testpb.TestMapMessage.StringWrapper.content)
	}
#if LANG_CXX11
	inline void TestMapMessage_StringWrapper::set_content(::std::string&& value) {

		content_.SetNoArena(
			&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
		// @@protoc_insertion_point(field_set_rvalue:testpb.TestMapMessage.StringWrapper.content)
	}
#endif
	inline void TestMapMessage_StringWrapper::set_content(const char* value) {
		GOOGLE_DCHECK(value != NULL);

		content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
		// @@protoc_insertion_point(field_set_char:testpb.TestMapMessage.StringWrapper.content)
	}
	inline void TestMapMessage_StringWrapper::set_content(const char* value, size_t size) {

		content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
			::std::string(reinterpret_cast<const char*>(value), size));
		// @@protoc_insertion_point(field_set_pointer:testpb.TestMapMessage.StringWrapper.content)
	}
	inline ::std::string* TestMapMessage_StringWrapper::mutable_content() {

		// @@protoc_insertion_point(field_mutable:testpb.TestMapMessage.StringWrapper.content)
		return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline ::std::string* TestMapMessage_StringWrapper::release_content() {
		// @@protoc_insertion_point(field_release:testpb.TestMapMessage.StringWrapper.content)

		return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline void TestMapMessage_StringWrapper::set_allocated_content(::std::string* content) {
		if (content != NULL) {

		}
		else {

		}
		content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
		// @@protoc_insertion_point(field_set_allocated:testpb.TestMapMessage.StringWrapper.content)
	}

	// int64 num = 2;
	inline void TestMapMessage_StringWrapper::clear_num() {
		num_ = GOOGLE_LONGLONG(0);
	}
	inline ::google::protobuf::int64 TestMapMessage_StringWrapper::num() const {
		// @@protoc_insertion_point(field_get:testpb.TestMapMessage.StringWrapper.num)
		return num_;
	}
	inline void TestMapMessage_StringWrapper::set_num(::google::protobuf::int64 value) {

		num_ = value;
		// @@protoc_insertion_point(field_set:testpb.TestMapMessage.StringWrapper.num)
	}

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// TestMapMessage

	// map<uint32, string> kv = 1;
	inline int TestMapMessage::kv_size() const {
		return kv_.size();
	}
	inline void TestMapMessage::clear_kv() {
		kv_.Clear();
	}
	inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
		TestMapMessage::kv() const {
		// @@protoc_insertion_point(field_map:testpb.TestMapMessage.kv)
		return kv_.GetMap();
	}
	inline ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
		TestMapMessage::mutable_kv() {
		// @@protoc_insertion_point(field_mutable_map:testpb.TestMapMessage.kv)
		return kv_.MutableMap();
	}

	// map<uint32, .testpb.TestMapMessage.StringWrapper> kv2 = 2;
	inline int TestMapMessage::kv2_size() const {
		return kv2_.size();
	}
	inline void TestMapMessage::clear_kv2() {
		kv2_.Clear();
	}
	inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::testpb::TestMapMessage_StringWrapper >&
		TestMapMessage::kv2() const {
		// @@protoc_insertion_point(field_map:testpb.TestMapMessage.kv2)
		return kv2_.GetMap();
	}
	inline ::google::protobuf::Map< ::google::protobuf::uint32, ::testpb::TestMapMessage_StringWrapper >*
		TestMapMessage::mutable_kv2() {
		// @@protoc_insertion_point(field_mutable_map:testpb.TestMapMessage.kv2)
		return kv2_.MutableMap();
	}

	// -------------------------------------------------------------------

	// TestFieldMaskMessage_NestedMessage

	// int64 p1 = 1;
	inline void TestFieldMaskMessage_NestedMessage::clear_p1() {
		p1_ = GOOGLE_LONGLONG(0);
	}
	inline ::google::protobuf::int64 TestFieldMaskMessage_NestedMessage::p1() const {
		// @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.NestedMessage.p1)
		return p1_;
	}
	inline void TestFieldMaskMessage_NestedMessage::set_p1(::google::protobuf::int64 value) {

		p1_ = value;
		// @@protoc_insertion_point(field_set:testpb.TestFieldMaskMessage.NestedMessage.p1)
	}

	// uint32 p2 = 2;
	inline void TestFieldMaskMessage_NestedMessage::clear_p2() {
		p2_ = 0u;
	}
	inline ::google::protobuf::uint32 TestFieldMaskMessage_NestedMessage::p2() const {
		// @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.NestedMessage.p2)
		return p2_;
	}
	inline void TestFieldMaskMessage_NestedMessage::set_p2(::google::protobuf::uint32 value) {

		p2_ = value;
		// @@protoc_insertion_point(field_set:testpb.TestFieldMaskMessage.NestedMessage.p2)
	}

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// TestFieldMaskMessage

	// string name = 1;
	inline void TestFieldMaskMessage::clear_name() {
		name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline const ::std::string& TestFieldMaskMessage::name() const {
		// @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.name)
		return name_.GetNoArena();
	}
	inline void TestFieldMaskMessage::set_name(const ::std::string& value) {

		name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
		// @@protoc_insertion_point(field_set:testpb.TestFieldMaskMessage.name)
	}
#if LANG_CXX11
	inline void TestFieldMaskMessage::set_name(::std::string&& value) {

		name_.SetNoArena(
			&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
		// @@protoc_insertion_point(field_set_rvalue:testpb.TestFieldMaskMessage.name)
	}
#endif
	inline void TestFieldMaskMessage::set_name(const char* value) {
		GOOGLE_DCHECK(value != NULL);

		name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
		// @@protoc_insertion_point(field_set_char:testpb.TestFieldMaskMessage.name)
	}
	inline void TestFieldMaskMessage::set_name(const char* value, size_t size) {

		name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
			::std::string(reinterpret_cast<const char*>(value), size));
		// @@protoc_insertion_point(field_set_pointer:testpb.TestFieldMaskMessage.name)
	}
	inline ::std::string* TestFieldMaskMessage::mutable_name() {

		// @@protoc_insertion_point(field_mutable:testpb.TestFieldMaskMessage.name)
		return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline ::std::string* TestFieldMaskMessage::release_name() {
		// @@protoc_insertion_point(field_release:testpb.TestFieldMaskMessage.name)

		return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
	}
	inline void TestFieldMaskMessage::set_allocated_name(::std::string* name) {
		if (name != NULL) {

		}
		else {

		}
		name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
		// @@protoc_insertion_point(field_set_allocated:testpb.TestFieldMaskMessage.name)
	}

	// .testpb.TestFieldMaskMessage.NestedMessage msg = 2;
	inline bool TestFieldMaskMessage::has_msg() const {
		return this != internal_default_instance() && msg_ != NULL;
	}
	inline void TestFieldMaskMessage::clear_msg() {
		if (GetArenaNoVirtual() == NULL && msg_ != NULL) {
			delete msg_;
		}
		msg_ = NULL;
	}
	inline const ::testpb::TestFieldMaskMessage_NestedMessage& TestFieldMaskMessage::msg() const {
		const ::testpb::TestFieldMaskMessage_NestedMessage* p = msg_;
		// @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.msg)
		return p != NULL ? *p : *reinterpret_cast<const ::testpb::TestFieldMaskMessage_NestedMessage*>(
			&::testpb::_TestFieldMaskMessage_NestedMessage_default_instance_);
	}
	inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::release_msg() {
		// @@protoc_insertion_point(field_release:testpb.TestFieldMaskMessage.msg)

		::testpb::TestFieldMaskMessage_NestedMessage* temp = msg_;
		msg_ = NULL;
		return temp;
	}
	inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::mutable_msg() {

		if (msg_ == NULL) {
			msg_ = new ::testpb::TestFieldMaskMessage_NestedMessage;
		}
		// @@protoc_insertion_point(field_mutable:testpb.TestFieldMaskMessage.msg)
		return msg_;
	}
	inline void TestFieldMaskMessage::set_allocated_msg(::testpb::TestFieldMaskMessage_NestedMessage* msg) {
		::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
		if (message_arena == NULL) {
			delete msg_;
		}
		if (msg) {
			::google::protobuf::Arena* submessage_arena = NULL;
			if (message_arena != submessage_arena) {
				msg = ::google::protobuf::internal::GetOwnedMessage(
					message_arena, msg, submessage_arena);
			}

		}
		else {

		}
		msg_ = msg;
		// @@protoc_insertion_point(field_set_allocated:testpb.TestFieldMaskMessage.msg)
	}

	// repeated .testpb.TestFieldMaskMessage.NestedMessage list = 3;
	inline int TestFieldMaskMessage::list_size() const {
		return list_.size();
	}
	inline void TestFieldMaskMessage::clear_list() {
		list_.Clear();
	}
	inline const ::testpb::TestFieldMaskMessage_NestedMessage& TestFieldMaskMessage::list(int index) const {
		// @@protoc_insertion_point(field_get:testpb.TestFieldMaskMessage.list)
		return list_.Get(index);
	}
	inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::mutable_list(int index) {
		// @@protoc_insertion_point(field_mutable:testpb.TestFieldMaskMessage.list)
		return list_.Mutable(index);
	}
	inline ::testpb::TestFieldMaskMessage_NestedMessage* TestFieldMaskMessage::add_list() {
		// @@protoc_insertion_point(field_add:testpb.TestFieldMaskMessage.list)
		return list_.Add();
	}
	inline ::google::protobuf::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage >*
		TestFieldMaskMessage::mutable_list() {
		// @@protoc_insertion_point(field_mutable_list:testpb.TestFieldMaskMessage.list)
		return &list_;
	}
	inline const ::google::protobuf::RepeatedPtrField< ::testpb::TestFieldMaskMessage_NestedMessage >&
		TestFieldMaskMessage::list() const {
		// @@protoc_insertion_point(field_list:testpb.TestFieldMaskMessage.list)
		return list_;
	}

	// map<int64, .testpb.TestFieldMaskMessage.NestedMessage> kv1 = 4;
	inline int TestFieldMaskMessage::kv1_size() const {
		return kv1_.size();
	}
	inline void TestFieldMaskMessage::clear_kv1() {
		kv1_.Clear();
	}
	inline const ::google::protobuf::Map< ::google::protobuf::int64, ::testpb::TestFieldMaskMessage_NestedMessage >&
		TestFieldMaskMessage::kv1() const {
		// @@protoc_insertion_point(field_map:testpb.TestFieldMaskMessage.kv1)
		return kv1_.GetMap();
	}
	inline ::google::protobuf::Map< ::google::protobuf::int64, ::testpb::TestFieldMaskMessage_NestedMessage >*
		TestFieldMaskMessage::mutable_kv1() {
		// @@protoc_insertion_point(field_mutable_map:testpb.TestFieldMaskMessage.kv1)
		return kv1_.MutableMap();
	}

	// map<int64, string> kv2 = 5;
	inline int TestFieldMaskMessage::kv2_size() const {
		return kv2_.size();
	}
	inline void TestFieldMaskMessage::clear_kv2() {
		kv2_.Clear();
	}
	inline const ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >&
		TestFieldMaskMessage::kv2() const {
		// @@protoc_insertion_point(field_map:testpb.TestFieldMaskMessage.kv2)
		return kv2_.GetMap();
	}
	inline ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >*
		TestFieldMaskMessage::mutable_kv2() {
		// @@protoc_insertion_point(field_mutable_map:testpb.TestFieldMaskMessage.kv2)
		return kv2_.MutableMap();
	}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------

	// -------------------------------------------------------------------


	// @@protoc_insertion_point(namespace_scope)

}  // namespace testpb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
